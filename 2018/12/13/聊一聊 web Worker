
<!DOCTYPE html>
<html lang="zh-Hans" class="loading">
<head><meta name="generator" content="Hexo 3.8.0">
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <meta name="viewport" content="width=device-width, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Pilotage</title>

    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <meta name="google" content="notranslate">
    <meta name="keywords" content="Fechin,"> 
    <meta name="description" content="1、什么是web Workerweb worker 是运行在后台的 JavaScript，独立于其他脚本，不会影响页面的性能。你可以继续做任何愿意做的事情：点击、选取内容等等，而此时 web wo,"> 
    <meta name="author" content="Pilotage"> 
    <link rel="alternative" href="atom.xml" title="Pilotage" type="application/atom+xml"> 
    <link rel="icon" href="/img/favicon.png"> 
    <link rel="stylesheet" href="//cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css">
    <link rel="stylesheet" href="/css/diaspora.css">
</head>
</html>
<body class="loading">
    <div id="loader"></div>
    <div id="single">
    <div id="top" style="display: block;">
    <div class="bar" style="width: 0;"></div>
    <a class="icon-home image-icon" href="javascript:;"></a>
    <div title="播放/暂停" class="icon-play"></div>
    <h3 class="subtitle">聊一聊 web Worker?</h3>
    <div class="social">
        <!--<div class="like-icon">-->
            <!--<a href="javascript:;" class="likeThis active"><span class="icon-like"></span><span class="count">76</span></a>-->
        <!--</div>-->
        <div>
            <div class="share">
                <a title="获取二维码" class="icon-scan" href="javascript:;"></a>
            </div>
            <div id="qr"></div>
        </div>
    </div>
    <div class="scrollbar"></div>
</div>
    <div class="section">
        <div class="article">
    <div class="main">
        <h1 class="title">聊一聊 web Worker?</h1>
        <div class="stuff">
            <span>十二月 13, 2018</span>
            
  <ul class="post-tags-list"><li class="post-tags-list-item"><a class="post-tags-list-link" href="/tags/javaScript/">javaScript</a></li><li class="post-tags-list-item"><a class="post-tags-list-link" href="/tags/js后台线程/">js后台线程</a></li></ul>


        </div>
        <div class="content markdown">
            <h3 id="1、什么是web-Worker"><a href="#1、什么是web-Worker" class="headerlink" title="1、什么是web Worker"></a>1、什么是web Worker</h3><p><code>web worker</code> 是运行在后台的 <code>JavaScript</code>，独立于其他脚本，不会影响页面的性能。你可以继续做任何愿意做的事情：点击、选取内容等等，而此时 <code>web worker</code> 在后台运行。<code>web worker</code> 的作用就是为 <code>javaScript</code> 创造多线程的环境。将一些计算密集型或高延迟的工作交给 <code>web worker</code> 来做，不会影响主进程。</p>
<h3 id="2、兼容性"><a href="#2、兼容性" class="headerlink" title="2、兼容性"></a>2、兼容性</h3><p>说到这个，<code>IE</code> 又得背锅了，现在除了 <code>Internet Explorer</code> 之外，其他的主流浏览器都支持。PS：IE说了，这个锅我不想背。</p>
<h3 id="3、注意事项"><a href="#3、注意事项" class="headerlink" title="3、注意事项"></a>3、注意事项</h3><ul>
<li>在worker内，不能直接操作DOM节点，也不能使用window对象的默认方法和属性</li>
<li>Worker 线程运行的脚本文件，必须与主线程的脚本文件同源。</li>
<li>workers和主线程间的数据传递通过这样的消息机制进行——双方都使用postMessage()方法发送各自的消息</li>
<li>Worker 线程无法读取本地文件</li>
</ul>
<h3 id="4、基本用法"><a href="#4、基本用法" class="headerlink" title="4、基本用法"></a>4、基本用法</h3><p>为了更好的兼容性，你可以通过下列方法去检测浏览器是否支持 <code>web worker</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.Worker) &#123;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="创建worker"><a href="#创建worker" class="headerlink" title="创建worker"></a>创建worker</h4><p>把 <code>web worker</code> 运行代码在里面去写</p>
<p>创建一个新的worker很简单。你需要做的是调用 <code>Worker()</code> 的构造器，指定一个脚本的URI来执行worker线程（main.js）：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myWorker = <span class="keyword">new</span> Worker(<span class="string">'worker.js'</span>);</span><br></pre></td></tr></table></figure>
<p><code>Worker()</code> 的构造器参数是一个脚本文件，但是，一定要注意，此文件不能是本地文件，因为不能调用 <code>file://</code>。</p>
<p>worker通过 <code>postMessage()</code> 方法和 <code>onmessage</code> 事件处理函数生效</p>
<p>onmessage: 监听事件<br>postmessage: 传送事件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">myWorker.postMessage(<span class="string">'Hello World！'</span>);</span><br><span class="line">myWorker.postMessage([first, second]);</span><br><span class="line"><span class="comment">// 其中first和second是两个变量，当它们发生改变时候 myWorker.postMessage([first, second]) 会将这两个值组成数组发送给worker</span></span><br></pre></td></tr></table></figure>
<p>在 <code>worker</code> 中接收到消息后，我们可以写这样一个事件处理函数代码作为响应（worker.js）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">onmessage = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> workerResult = <span class="string">`Result: <span class="subst">$&#123;(e.data[<span class="number">0</span>] * e.data[<span class="number">1</span>]&#125;</span>`</span>);</span><br><span class="line">  postMessage(workerResult);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>onmessage</code> 处理函数允许我们在任何时刻，一旦接收到消息就可以执行一些代码。这里我们简单的对这2个数字作乘法处理并再次使用 <code>postMessage()</code> 方法，将结果回传给主线程。</p>
<p>回到主线程，我们再次使用onmessage以响应worker回传的消息：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">myWorker.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  result.textContent = e.data;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Message received from worker'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这里我们获取消息事件的data，并且将它设置为result的textContent，所以用户可以直接看到运算的结果。</p>
<p>PS：在主线程中使用时，<code>onmessage</code> 和 <code>postMessage()</code> 必须挂在<code>worker</code> 对象上，而在<code>worker</code> 中使用时不用这样做。原因是，在<code>worker</code> 内部，<code>worker</code> 是有效的全局作用域。</p>
<h4 id="终止-worker"><a href="#终止-worker" class="headerlink" title="终止 worker"></a>终止 worker</h4><p>那么我们是怎么去怎么终止运行中的 <code>worker</code> 呢？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myWorker.terminate();</span><br></pre></td></tr></table></figure>
<p>worker 线程会被立即杀死，不会有任何机会让它完成自己的操作或清理工作。</p>
<p>而在worker线程中，workers 也可以调用自己的 close  方法进行关闭：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">close();</span><br></pre></td></tr></table></figure>
<h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><p>当 <code>worker</code> 出现运行中错误时，它的 <code>onerror</code> 事件处理函数会被调用。它会收到一个扩展了 <code>ErrorEvent</code> 接口的名为 <code>error</code> 的事件。</p>
<p>该事件不会冒泡并且可以被取消；为了防止触发默认动作，worker 可以调用错误事件的 preventDefault()方法。</p>
<ul>
<li>message 可读性良好的错误消息。</li>
<li>filename 发生错误的脚本文件名。</li>
<li>lineno 发生错误时所在脚本文件的行号。</li>
</ul>
<h4 id="引入脚本与库"><a href="#引入脚本与库" class="headerlink" title="引入脚本与库"></a>引入脚本与库</h4><p><code>worker</code> 线程能够访问一个全局函数 <code>importScripts()</code> 来引入脚本，该函数接受0个或者多个 <code>URI</code> 作为参数来引入资源；</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">importScripts();                        <span class="comment">/* 什么都不引入 */</span></span><br><span class="line">importScripts(<span class="string">'index1.js'</span>);                <span class="comment">/* 只引入 "foo.js" */</span></span><br><span class="line">importScripts(<span class="string">'index1.js'</span>, <span class="string">'index2.js'</span>);      <span class="comment">/* 引入两个脚本 */</span></span><br></pre></td></tr></table></figure>
<p>PS；如果脚本无法加载，将抛出 NETWORK_ERROR 异常，接下来的代码也无法执行。</p>
<h4 id="共享worker"><a href="#共享worker" class="headerlink" title="共享worker"></a>共享worker</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myWorker = <span class="keyword">new</span> SharedWorker(<span class="string">'worker.js'</span>);</span><br><span class="line"></span><br><span class="line">myWorker.port.start();  <span class="comment">// 父级线程中的调用</span></span><br><span class="line"></span><br><span class="line">port.start(); <span class="comment">// worker线程中的调用, 假设port变量代表一个端口</span></span><br></pre></td></tr></table></figure>
<h4 id="共享worker中消息的接收和发送"><a href="#共享worker中消息的接收和发送" class="headerlink" title="共享worker中消息的接收和发送"></a>共享worker中消息的接收和发送</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">squareNumber.onchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  myWorker.port.postMessage([squareNumber.value,squareNumber.value]);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Message posted to worker'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">onconnect = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> port = e.ports[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">  port.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> workerResult = <span class="string">'Result: '</span> + (e.data[<span class="number">0</span>] * e.data[<span class="number">1</span>]);</span><br><span class="line">    port.postMessage(workerResult);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

            <!--[if lt IE 9]><script>document.createElement('audio');</script><![endif]-->
            <audio id="audio" loop="1" preload="auto" controls="controls" data-autoplay="false">
                <source type="audio/mpeg" src="">
            </audio>
            
                <ul id="audio-list" style="display:none">
                    
                        <li title="0" data-url="http://link.hhtjim.com/163/5146554.mp3"></li>
                    
                        <li title="1" data-url="http://link.hhtjim.com/qq/001faIUs4M2zna.mp3"></li>
                    
                </ul>
            
        </div>
        
    <div id="gitalk-container" class="comment link" data-ae="false" data-ci="" data-cs="" data-r="" data-o="" data-a="" data-d="false">查看评论</div>


    </div>
    
</div>


    </div>
</div>
</body>
<script src="//cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js"></script>
<script src="//lib.baomitu.com/jquery/1.8.3/jquery.min.js"></script>
<script src="/js/plugin.js"></script>
<script src="/js/diaspora.js"></script>
<link rel="stylesheet" href="/photoswipe/photoswipe.css">
<link rel="stylesheet" href="/photoswipe/default-skin/default-skin.css">
<script src="/photoswipe/photoswipe.min.js"></script>
<script src="/photoswipe/photoswipe-ui-default.min.js"></script>

<!-- Root element of PhotoSwipe. Must have class pswp. -->
<div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">
    <!-- Background of PhotoSwipe. 
         It's a separate element as animating opacity is faster than rgba(). -->
    <div class="pswp__bg"></div>
    <!-- Slides wrapper with overflow:hidden. -->
    <div class="pswp__scroll-wrap">
        <!-- Container that holds slides. 
            PhotoSwipe keeps only 3 of them in the DOM to save memory.
            Don't modify these 3 pswp__item elements, data is added later on. -->
        <div class="pswp__container">
            <div class="pswp__item"></div>
            <div class="pswp__item"></div>
            <div class="pswp__item"></div>
        </div>
        <!-- Default (PhotoSwipeUI_Default) interface on top of sliding area. Can be changed. -->
        <div class="pswp__ui pswp__ui--hidden">
            <div class="pswp__top-bar">
                <!--  Controls are self-explanatory. Order can be changed. -->
                <div class="pswp__counter"></div>
                <button class="pswp__button pswp__button--close" title="Close (Esc)"></button>
                <button class="pswp__button pswp__button--share" title="Share"></button>
                <button class="pswp__button pswp__button--fs" title="Toggle fullscreen"></button>
                <button class="pswp__button pswp__button--zoom" title="Zoom in/out"></button>
                <!-- Preloader demo http://codepen.io/dimsemenov/pen/yyBWoR -->
                <!-- element will get class pswp__preloader--active when preloader is running -->
                <div class="pswp__preloader">
                    <div class="pswp__preloader__icn">
                      <div class="pswp__preloader__cut">
                        <div class="pswp__preloader__donut"></div>
                      </div>
                    </div>
                </div>
            </div>
            <div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">
                <div class="pswp__share-tooltip"></div> 
            </div>
            <button class="pswp__button pswp__button--arrow--left" title="Previous (arrow left)">
            </button>
            <button class="pswp__button pswp__button--arrow--right" title="Next (arrow right)">
            </button>
            <div class="pswp__caption">
                <div class="pswp__caption__center"></div>
            </div>
        </div>
    </div>
</div>




</html>